// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: rpc_client.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RPCClientClient is the client API for RPCClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCClientClient interface {
	FindById(ctx context.Context, in *ClientParamId, opts ...grpc.CallOption) (*Client, error)
	CreateClient(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Client, error)
	UpdateClient(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Client, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	SearchClient(ctx context.Context, in *SearchClientRequest, opts ...grpc.CallOption) (*SearchClientResponse, error)
}

type rPCClientClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCClientClient(cc grpc.ClientConnInterface) RPCClientClient {
	return &rPCClientClient{cc}
}

func (c *rPCClientClient) FindById(ctx context.Context, in *ClientParamId, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/flight_booking.RPCClient/FindById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClientClient) CreateClient(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/flight_booking.RPCClient/CreateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClientClient) UpdateClient(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/flight_booking.RPCClient/UpdateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClientClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, "/flight_booking.RPCClient/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClientClient) SearchClient(ctx context.Context, in *SearchClientRequest, opts ...grpc.CallOption) (*SearchClientResponse, error) {
	out := new(SearchClientResponse)
	err := c.cc.Invoke(ctx, "/flight_booking.RPCClient/SearchClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCClientServer is the server API for RPCClient service.
// All implementations must embed UnimplementedRPCClientServer
// for forward compatibility
type RPCClientServer interface {
	FindById(context.Context, *ClientParamId) (*Client, error)
	CreateClient(context.Context, *Client) (*Client, error)
	UpdateClient(context.Context, *Client) (*Client, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	SearchClient(context.Context, *SearchClientRequest) (*SearchClientResponse, error)
	mustEmbedUnimplementedRPCClientServer()
}

// UnimplementedRPCClientServer must be embedded to have forward compatible implementations.
type UnimplementedRPCClientServer struct {
}

func (UnimplementedRPCClientServer) FindById(context.Context, *ClientParamId) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedRPCClientServer) CreateClient(context.Context, *Client) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (UnimplementedRPCClientServer) UpdateClient(context.Context, *Client) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClient not implemented")
}
func (UnimplementedRPCClientServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedRPCClientServer) SearchClient(context.Context, *SearchClientRequest) (*SearchClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchClient not implemented")
}
func (UnimplementedRPCClientServer) mustEmbedUnimplementedRPCClientServer() {}

// UnsafeRPCClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCClientServer will
// result in compilation errors.
type UnsafeRPCClientServer interface {
	mustEmbedUnimplementedRPCClientServer()
}

func RegisterRPCClientServer(s grpc.ServiceRegistrar, srv RPCClientServer) {
	s.RegisterService(&RPCClient_ServiceDesc, srv)
}

func _RPCClient_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientParamId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCClientServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flight_booking.RPCClient/FindById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCClientServer).FindById(ctx, req.(*ClientParamId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCClient_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCClientServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flight_booking.RPCClient/CreateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCClientServer).CreateClient(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCClient_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCClientServer).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flight_booking.RPCClient/UpdateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCClientServer).UpdateClient(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCClient_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCClientServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flight_booking.RPCClient/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCClientServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCClient_SearchClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCClientServer).SearchClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flight_booking.RPCClient/SearchClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCClientServer).SearchClient(ctx, req.(*SearchClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCClient_ServiceDesc is the grpc.ServiceDesc for RPCClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flight_booking.RPCClient",
	HandlerType: (*RPCClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindById",
			Handler:    _RPCClient_FindById_Handler,
		},
		{
			MethodName: "CreateClient",
			Handler:    _RPCClient_CreateClient_Handler,
		},
		{
			MethodName: "UpdateClient",
			Handler:    _RPCClient_UpdateClient_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _RPCClient_ChangePassword_Handler,
		},
		{
			MethodName: "SearchClient",
			Handler:    _RPCClient_SearchClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_client.proto",
}
